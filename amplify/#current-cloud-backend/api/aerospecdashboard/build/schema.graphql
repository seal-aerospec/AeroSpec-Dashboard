type AeroSpec {
  id: ID!
  deviceName: String!
  temperature: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAeroSpecConnection {
  items: [AeroSpec]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelAeroSpecFilterInput {
  id: ModelIDInput
  deviceName: ModelStringInput
  temperature: ModelIntInput
  and: [ModelAeroSpecFilterInput]
  or: [ModelAeroSpecFilterInput]
  not: ModelAeroSpecFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getAeroSpec(id: ID!): AeroSpec
  listAeroSpecs(filter: ModelAeroSpecFilterInput, limit: Int, nextToken: String): ModelAeroSpecConnection
}

input CreateAeroSpecInput {
  id: ID
  deviceName: String!
  temperature: Int!
}

input UpdateAeroSpecInput {
  id: ID!
  deviceName: String
  temperature: Int
}

input DeleteAeroSpecInput {
  id: ID
}

type Mutation {
  createAeroSpec(input: CreateAeroSpecInput!, condition: ModelAeroSpecConditionInput): AeroSpec
  updateAeroSpec(input: UpdateAeroSpecInput!, condition: ModelAeroSpecConditionInput): AeroSpec
  deleteAeroSpec(input: DeleteAeroSpecInput!, condition: ModelAeroSpecConditionInput): AeroSpec
}

input ModelAeroSpecConditionInput {
  deviceName: ModelStringInput
  temperature: ModelIntInput
  and: [ModelAeroSpecConditionInput]
  or: [ModelAeroSpecConditionInput]
  not: ModelAeroSpecConditionInput
}

type Subscription {
  onCreateAeroSpec: AeroSpec @aws_subscribe(mutations: ["createAeroSpec"])
  onUpdateAeroSpec: AeroSpec @aws_subscribe(mutations: ["updateAeroSpec"])
  onDeleteAeroSpec: AeroSpec @aws_subscribe(mutations: ["deleteAeroSpec"])
}
