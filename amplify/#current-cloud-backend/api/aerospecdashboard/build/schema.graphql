type DeviceDataTest {
  id: String!
  payload: String!
  timestamp: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDeviceDataTestConnection {
  items: [DeviceDataTest]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelDeviceDataTestFilterInput {
  id: ModelStringInput
  payload: ModelStringInput
  timestamp: ModelStringInput
  and: [ModelDeviceDataTestFilterInput]
  or: [ModelDeviceDataTestFilterInput]
  not: ModelDeviceDataTestFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getDeviceDataTest(id: ID!): DeviceDataTest
  listDeviceDataTests(filter: ModelDeviceDataTestFilterInput, limit: Int, nextToken: String): ModelDeviceDataTestConnection
}

input CreateDeviceDataTestInput {
  id: String!
  payload: String!
  timestamp: String!
}

input UpdateDeviceDataTestInput {
  id: String!
  payload: String
  timestamp: String
}

input DeleteDeviceDataTestInput {
  id: ID
}

type Mutation {
  createDeviceDataTest(input: CreateDeviceDataTestInput!, condition: ModelDeviceDataTestConditionInput): DeviceDataTest
  updateDeviceDataTest(input: UpdateDeviceDataTestInput!, condition: ModelDeviceDataTestConditionInput): DeviceDataTest
  deleteDeviceDataTest(input: DeleteDeviceDataTestInput!, condition: ModelDeviceDataTestConditionInput): DeviceDataTest
}

input ModelDeviceDataTestConditionInput {
  payload: ModelStringInput
  timestamp: ModelStringInput
  and: [ModelDeviceDataTestConditionInput]
  or: [ModelDeviceDataTestConditionInput]
  not: ModelDeviceDataTestConditionInput
}

type Subscription {
  onCreateDeviceDataTest: DeviceDataTest @aws_subscribe(mutations: ["createDeviceDataTest"])
  onUpdateDeviceDataTest: DeviceDataTest @aws_subscribe(mutations: ["updateDeviceDataTest"])
  onDeleteDeviceDataTest: DeviceDataTest @aws_subscribe(mutations: ["deleteDeviceDataTest"])
}
