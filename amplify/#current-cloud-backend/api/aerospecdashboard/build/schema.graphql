type MockDeviceDataTest {
  id: ID!
  sensor_id: String!
  timestamp: String!
  CarbonDioxide: String!
  Nitrogen: String!
  Oxygen: String!
  temperature: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMockDeviceDataTestConnection {
  items: [MockDeviceDataTest]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelMockDeviceDataTestFilterInput {
  sensor_id: ModelStringInput
  timestamp: ModelStringInput
  CarbonDioxide: ModelStringInput
  Nitrogen: ModelStringInput
  Oxygen: ModelStringInput
  temperature: ModelStringInput
  and: [ModelMockDeviceDataTestFilterInput]
  or: [ModelMockDeviceDataTestFilterInput]
  not: ModelMockDeviceDataTestFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getMockDeviceDataTest(id: ID!): MockDeviceDataTest
  listMockDeviceDataTests(filter: ModelMockDeviceDataTestFilterInput, limit: Int, nextToken: String): ModelMockDeviceDataTestConnection
}

input CreateMockDeviceDataTestInput {
  id: ID
  sensor_id: String!
  timestamp: String!
  CarbonDioxide: String!
  Nitrogen: String!
  Oxygen: String!
  temperature: String!
}

input UpdateMockDeviceDataTestInput {
  sensor_id: String
  timestamp: String
  CarbonDioxide: String
  Nitrogen: String
  Oxygen: String
  temperature: String
}

input DeleteMockDeviceDataTestInput {
  id: ID
}

type Mutation {
  createMockDeviceDataTest(input: CreateMockDeviceDataTestInput!, condition: ModelMockDeviceDataTestConditionInput): MockDeviceDataTest
  updateMockDeviceDataTest(input: UpdateMockDeviceDataTestInput!, condition: ModelMockDeviceDataTestConditionInput): MockDeviceDataTest
  deleteMockDeviceDataTest(input: DeleteMockDeviceDataTestInput!, condition: ModelMockDeviceDataTestConditionInput): MockDeviceDataTest
}

input ModelMockDeviceDataTestConditionInput {
  sensor_id: ModelStringInput
  timestamp: ModelStringInput
  CarbonDioxide: ModelStringInput
  Nitrogen: ModelStringInput
  Oxygen: ModelStringInput
  temperature: ModelStringInput
  and: [ModelMockDeviceDataTestConditionInput]
  or: [ModelMockDeviceDataTestConditionInput]
  not: ModelMockDeviceDataTestConditionInput
}

type Subscription {
  onCreateMockDeviceDataTest: MockDeviceDataTest @aws_subscribe(mutations: ["createMockDeviceDataTest"])
  onUpdateMockDeviceDataTest: MockDeviceDataTest @aws_subscribe(mutations: ["updateMockDeviceDataTest"])
  onDeleteMockDeviceDataTest: MockDeviceDataTest @aws_subscribe(mutations: ["deleteMockDeviceDataTest"])
}
